extend type Query {
	resultAllComment: MessageQueryComment!
	resultAllCommentById(id: String!): MessageQueryComment!
	resultCommentById(id: String!): MessageQueryIdComment!
}

extend type Mutation {
	createComment(input: InputComment!): MessageMutationComment!
	deleteComment(id: String!): MessageMutationComment!
	updateComment(id: String!, input: InputComment!): MessageMutationComment!
}

## Custom Type Data
scalar ArticleImage
scalar ArticleTags

## Type Data Schema Relation
type RelationArticle {
	_id: String
	title: String
	description: String
	content: String
	category: String
	image: ArticleImage
	tags: [ArticleTags]
	createdAt: String
	updatedAt: String
}

## Input Data Schema
input InputComment {
	text: String!
	articleId: String!
}

## Comment Type Data Schema
interface IComment {
	_id: String!
	text: String!
	articleId: RelationArticle
	createdAt: String
	updatedAt: String
}

type Comment implements IComment {
	_id: String!
	text: String!
	articleId: RelationArticle
	createdAt: String
	updatedAt: String
}

## Message Comment Schema
type MessageMutationComment {
	code: Int!
	message: String!
}

type MessageQueryComment {
	code: Int!
	message: String!
	data: [Comment]
}

type MessageQueryIdComment {
	code: Int!
	message: String!
	data: Comment
}
